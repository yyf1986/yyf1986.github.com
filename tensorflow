https://blog.csdn.net/xierhacker/article/list/3

get_tensor_by_name(name)

作用：返回给定名称的tensor


tf.Session.__init__(target=”, graph=None, config=None)

tf.Session.run(fetches, feed_dict=None, options=None, run_metadata=None)
作用： 
运行操作估算（计算）tensor。 
参数： 
fetches: 一个单独的图的元素，或者一个图的元素的列表。或者一个字典，这个字典的值是刚刚所说的一个图的元素（元素列表）（见下面第四部分的例子）。
图的元素可以是
一个操作（那么fetch回来的值将是None）；
一个tensor（反回的值将是将是表示这个tensor值的numpy ndarray对象）；
一个sparsetensor（稀疏tensor）；
一个get_tensor_handle的操作；
一个表示tensor或者操作名称的string 
feed_dict: 一个字典，为之前“占位”的元素“喂”给值。（具体见第四部分的例子。）

返回值： 
如果你的fetchs参数传入的图的一个元素，那么返回一个单独的值，
要是是图的一个元素列表，那么返回就是一个列表，
要是你传入的是一个字典，那么返回的也是一个字典，这个字典的键和你传入的字典的键是一样的。
函数返回的值和你传进去的fetch参数的形状是一样的，只是里面的元素是相应的值而已了


Fetch

为了取回操作的输出内容, 可以在使用 Session 对象的 run() 调用 执行图时, 传入一些 tensor, 这些 tensor 会帮助你取回结果. 在之前的例子里, 我们只取回了单个节点 state, 但是你也可以取回多个 tensor:

input1 = tf.constant(3.0)
input2 = tf.constant(2.0)
input3 = tf.constant(5.0)
intermed = tf.add(input2, input3)
mul = tf.mul(input1, intermed)

with tf.Session():
  result = sess.run([mul, intermed])
  print result

# 输出:
# [array([ 21.], dtype=float32), array([ 7.], dtype=float32)]
Feed

上述示例在计算图中引入了 tensor, 以常量或变量的形式存储. TensorFlow 还提供了 feed 机制, 该机制 可以临时替代图中的任意操作中的 tensor 可以对图中任何操作提交补丁, 直接插入一个 tensor.

feed 使用一个 tensor 值临时替换一个操作的输出结果. 你可以提供 feed 数据作为 run() 调用的参数. feed 只在调用它的方法内有效, 方法结束, feed 就会消失. 最常见的用例是将某些特殊的操作指定为 "feed" 操作, 标记的方法是使用 tf.placeholder() 为这些操作创建占位符.

input1 = tf.placeholder(tf.types.float32)
input2 = tf.placeholder(tf.types.float32)
output = tf.mul(input1, input2)

with tf.Session() as sess:
  print sess.run([output], feed_dict={input1:[7.], input2:[2.]})

# 输出:
# [array([ 14.], dtype=float32)]
如果没有正确提供 feed, placeholder() 操作将会产生错误.
